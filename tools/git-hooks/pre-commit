#!/usr/local/bin/php
<?php

class GitPreCommitHook
{
  private bool $isWindows;

  public function __construct()
  {
    $this->isWindows = (substr(php_uname(), 0, 7) == 'Windows');
  }

  private function log(string $message)
  {
    echo(sprintf("%s\n", $message));
  }

  private function beginError()
  {
    echo(sprintf("%s[31m\n", chr(27)));
  }

  private function endError()
  {
    echo(sprintf("%s[0m\n", chr(27)));
  }

  private function lint(string $fileMask, string $command, string $toolName, string $installUrl, callable $errorCallback = null)
  {
    $files  = [];
    $output = [];
    $retval = 0;
    if ($this->isWindows) {
      $grep = sprintf('findstr "%s$" /R', $fileMask);
    } else {
      $grep = sprintf('grep "%s$"', $fileMask);
    }
    $cmd = sprintf('git diff --cached --name-only --diff-filter=ACM | %s', $grep);
    exec($cmd, $files, $retval);
    if ($files) {
      $this->log('Running ' . $toolName . ' validation');
      foreach($files as $file) {
        if (!preg_match('~/vendor/~i', $file) || preg_match('~/vendor/jagermesh/~i', $file)) {
          $cmd = sprintf('%s "%s"', $command, $file);
          if (!$this->isWindows) {
            $cmd = sprintf('export PATH=/usr/local/bin:$PATH; %s', $cmd);
          }
          $this->log($cmd);
          exec($cmd, $output, $retval);
          if ($retval !== 0) {
            $this->beginError();
            if ($output) {
              foreach($output as $line) {
                if ($line) {
                  $this->log($line);
                }
              }
            } else {
              $this->log(sprintf('Command "%s" failed with code %d, probably %s not installed', $cmd, $retval, $toolName));
              $this->log(sprintf('Please refer to this link about how to install %s: %s', $toolName, $installUrl));
            }
            $this->endError();
            if ($errorCallback) {
              $errorCallback();
            }
            exit(1);
          }
        }
      }
    }
  }

  private function jsLint()
  {
    $this->lint('.js', 'eslint --fix --quiet', 'ESLint', 'https://eslint.org/docs/user-guide/getting-started');
  }

  private function phpLint()
  {
    $this->lint('.php', 'php -l', 'PHP', 'https://php.net/');
  }

  private function findTool(string $toolName): string
  {
    return sprintf('%s/vendor/%s', file_exists(dirname(__DIR__, 2)), $toolName);
  }

  private function phpCS()
  {
    $toolName = $this->isWindows ? 'squizlabs/php_codesniffer/bin/phpcs.bat' : 'bin/ecs check';
    $cmdPath = $this->findTool($toolName);
    $this->lint('.php', $cmdPath, 'phpcs', 'https://github.com/squizlabs/PHP_CodeSniffer');
  }

  private function phpCBF()
  {
    $toolName = $this->isWindows ? 'squizlabs/php_codesniffer/bin/phpcbf.bat' : 'bin/phpcbf';
    $cmdPath = $this->findTool($toolName);
    $this->lint('.php', $cmdPath, 'phpcbf', 'https://github.com/squizlabs/PHP_CodeSniffer');
  }

  private function phpECS()
  {
    $cmdPath = $this->findTool('bin/ecs');
    $this->lint('.php', $cmdPath . ' check --clear-cache', 'ecs', 'https://https://github.com/symplify/easy-coding-standard', function() use ($cmdPath) {
      $this->lint('.php', $cmdPath . ' check --fix --clear-cache', 'ecs', 'https://https://github.com/symplify/easy-coding-standard');
    });
  }

  private function phpRector()
  {
    $cmdPath = $this->findTool('bin/rector');
    $this->lint('.php', $cmdPath . ' process --clear-cache --dry-run', 'rector', 'https://github.com/rectorphp/rector', function() use ($cmdPath) {
      $this->lint('.php', $cmdPath . ' process --clear-cache', 'rector', 'https://github.com/rectorphp/rector');
    });
  }

  public function run()
  {
    $this->jsLint();
    $this->phpLint();
    $this->phpRector();
    $this->phpECS();
  }
}

$gitPreCommitHook = new \GitPreCommitHook();
$gitPreCommitHook->run();
